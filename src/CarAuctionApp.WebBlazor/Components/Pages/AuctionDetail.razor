@page "/auctions/{AuctionId:guid}"
@using Microsoft.AspNetCore.SignalR.Client
@inject HttpClient Http
@rendermode InteractiveServer
@implements IAsyncDisposable

<PageTitle>Auction</PageTitle>

<h1>Auction: </h1>

@if (isLoading)
{
    <p>Loading auction data...</p>
}
else if (isError)
{
    <p>Error loading auction data.</p>
}
else
{
    <h4>Auction fetched successfully!</h4>
}

<ul id="bidsList">
    @foreach (var bid in bidUpdates)
    {
        <li>@bid</li>
    }
</ul>

@code {

    [Parameter] public Guid AuctionId { get; set; }

    private HubConnection? hubConnection;
    private List<decimal> bidUpdates = [];
    private bool isLoading = true;
    private bool isError = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var auctionData = await Http.GetFromJsonAsync<object>("https://localhost:7215/auctions/" + AuctionId);
            if (auctionData != null)
            {
                await InitializeSignalRConnection();
            }
            else
            {
                isError = true;
            }
        }
        catch (Exception)
        {
            isError = true;
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task InitializeSignalRConnection()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl("https://localhost:7215/hubs/auction")
            .WithAutomaticReconnect()
            .Build();

        hubConnection.On<Guid, decimal>("ReceiveBidUpdate", (auctionId, bidAmount) =>
        {
            bidUpdates.Add(bidAmount);
            InvokeAsync(StateHasChanged);
        });

        hubConnection.Reconnected += async (connectionId) =>
        {
            await JoinGroup();
        };

        await hubConnection.StartAsync();
        await JoinGroup();

    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    private async Task JoinGroup()
    {
        if (hubConnection?.State == HubConnectionState.Connected)
        {
            await hubConnection.SendAsync("JoinAuctionGroup", AuctionId);
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            // Leave the group before disposing
            if (hubConnection.State == HubConnectionState.Connected)
            {
                await hubConnection.SendAsync("LeaveAuctionGroup", AuctionId);
            }

            await hubConnection.DisposeAsync();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (hubConnection?.State == HubConnectionState.Connected)
        {
            await hubConnection.SendAsync("LeaveAuctionGroup", AuctionId);
            await hubConnection.SendAsync("JoinAuctionGroup", AuctionId);
        }
    }

}
